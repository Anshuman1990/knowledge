1
00:00:08,670 --> 00:00:09,320
Hello.

2
00:00:09,410 --> 00:00:09,890
Saw.

3
00:00:09,990 --> 00:00:11,850
I'm excited to get started.

4
00:00:11,850 --> 00:00:17,760
First I want to go through a basic overview of design patterns give some definitions give you a little

5
00:00:17,760 --> 00:00:22,720
history and tell you the four common essential parts of a design pattern.

6
00:00:25,760 --> 00:00:31,240
All right so as far as everyday life in the real world we always talk about the way that we do things

7
00:00:31,270 --> 00:00:31,830
right.

8
00:00:31,870 --> 00:00:36,990
Our hobbies our home life and we recognize when we're doing these hobbies and this.

9
00:00:37,000 --> 00:00:39,250
This everyday work that we have power patterns right.

10
00:00:39,250 --> 00:00:40,000
You repeat things.

11
00:00:40,000 --> 00:00:40,200
All right.

12
00:00:40,240 --> 00:00:45,910
When you go to work you get up in the morning you brush your teeth you drive a certain distance certain

13
00:00:45,910 --> 00:00:51,070
place you're doing a lot of repetition and this is the same when it comes to software.

14
00:00:51,070 --> 00:00:54,820
When you write code you end up repeating yourself quite a bit.

15
00:00:54,820 --> 00:01:02,080
So when you repeat yourself these are patterns and if you're going to repeat yourself you can identify

16
00:01:02,520 --> 00:01:05,360
a really good common solution to these patterns.

17
00:01:05,380 --> 00:01:11,530
So software engineers face common problems during development of various software programs and you should

18
00:01:11,530 --> 00:01:13,280
know this as you're writing code.

19
00:01:13,330 --> 00:01:16,540
A lot of times you encounter the same problems.

20
00:01:16,640 --> 00:01:22,100
And so for example when we tell a colleague how we accomplish a tricky bit of programming so that the

21
00:01:22,100 --> 00:01:23,840
colleague doesn't have to recreate it from scratch.

22
00:01:23,840 --> 00:01:23,990
Right.

23
00:01:23,990 --> 00:01:25,070
We help one another out.

24
00:01:25,580 --> 00:01:27,470
You don't want to reinvent the wheel.

25
00:01:27,530 --> 00:01:30,030
You want to be able to say hey I solve this problem.

26
00:01:30,060 --> 00:01:31,280
It was really really tough.

27
00:01:31,580 --> 00:01:33,770
And this is how I solved it.

28
00:01:33,810 --> 00:01:37,740
And when you solve it you want to make sure that your solution was actually tried and tested useful

29
00:01:38,110 --> 00:01:39,930
and it was a good way of solving right.

30
00:01:39,930 --> 00:01:44,620
You don't want to give out patterns of repetition for bad ways to do things.

31
00:01:44,640 --> 00:01:51,010
So when we face these common problems for these common software problems we want to be able to communicate

32
00:01:51,010 --> 00:01:55,720
to other developers how we solve these problems using good techniques and good programming.

33
00:01:55,740 --> 00:02:01,200
So in the past when we found solutions to these common problems there was really no way to tell your

34
00:02:01,200 --> 00:02:04,890
co-worker your or your partner or whoever you were coding with.

35
00:02:04,920 --> 00:02:07,560
There were no standards right there in the documentation.

36
00:02:07,560 --> 00:02:12,020
You couldn't just say hey refer to this go solve it the way I did.

37
00:02:12,090 --> 00:02:16,380
So it becomes a significant problem when you don't have this communication especially when new team

38
00:02:16,380 --> 00:02:23,880
members you have new people write code you have new students develop Java they write new programs and

39
00:02:23,880 --> 00:02:29,190
in the past you can actually tell them Hey once you go solve this common problem like this.

40
00:02:29,190 --> 00:02:34,770
So it became a problem when you have new people to not be able to tell them these good things that you

41
00:02:34,770 --> 00:02:35,860
came up with.

42
00:02:36,210 --> 00:02:41,460
Especially I know that when I first started writing code and a lot of people weren't familiar with design

43
00:02:41,460 --> 00:02:43,480
patterns early on.

44
00:02:43,620 --> 00:02:47,620
It was no way to say hey go solve this problem this way.

45
00:02:47,880 --> 00:02:52,710
Go use the adapter go use the factory method that just didn't exist.

46
00:02:52,800 --> 00:02:57,810
And so when you don't have these techniques these documentation these patterns that you can reuse they're

47
00:02:57,810 --> 00:03:00,360
not documented anywhere they're not even thought of.

48
00:03:00,480 --> 00:03:06,040
It takes a lot of effort to become familiar with an existing product it just really it's just gonna

49
00:03:06,070 --> 00:03:06,810
save you time.

50
00:03:06,820 --> 00:03:11,110
If you have somewhere that's documented that you can solve common problems common solutions.

51
00:03:11,200 --> 00:03:18,270
They were something that was created to help solve these common solutions to common problems.

52
00:03:18,490 --> 00:03:21,010
And they're mainly aimed towards object oriented programming languages.

53
00:03:21,010 --> 00:03:23,550
And obviously this is Java class we're going to focus on Java.

54
00:03:23,680 --> 00:03:30,400
But you can use the design patterns that we're going to study and see plus plus C sharp any object oriented

55
00:03:30,400 --> 00:03:37,990
language Smalltalk all the popular ones out there designing object going to software is hard.

56
00:03:37,990 --> 00:03:42,010
Designing reusable object oriented software is even harder.

57
00:03:42,010 --> 00:03:42,200
OK.

58
00:03:42,220 --> 00:03:50,050
So if there's some kind of concept or some pattern that you can study that helps with that it's tremendously

59
00:03:50,050 --> 00:03:55,980
advantage advantageous so design patterns address these issues that I just mentioned.

60
00:03:56,130 --> 00:04:03,060
They help solve common problems in software with provide providing common software solutions in documenting

61
00:04:03,060 --> 00:04:08,090
that so it's a standard that's provided.

62
00:04:08,250 --> 00:04:13,830
It's really really helps give directions to new developers or even experienced developers on how to

63
00:04:13,830 --> 00:04:16,000
solve these common core software problems.

64
00:04:16,080 --> 00:04:22,330
Very very important to learn as it helps you become a much much better programmer and designer.

65
00:04:24,450 --> 00:04:29,130
So I wanted to go through some definitions just some formal definitions to so you can kind of hear other

66
00:04:29,130 --> 00:04:33,180
thoughts of other other important people in the field.

67
00:04:33,180 --> 00:04:38,100
So when you have these different definitions helps you see some different perspective.

68
00:04:38,100 --> 00:04:43,650
So the real probably the real most popular one you've heard is design patterns are reoccurring solutions

69
00:04:44,010 --> 00:04:46,970
to design problems you see over and over and over.

70
00:04:47,100 --> 00:04:51,990
All right pretty straightforward design patterns constitute a set of rules describing how to accomplish

71
00:04:51,990 --> 00:04:54,820
certain tasks in the realm of software development.

72
00:04:54,840 --> 00:05:00,980
Again you're going to notice these these definitions relatively say the same thing common software solutions

73
00:05:01,000 --> 00:05:07,050
common problems design patterns focus more on reuse of recurring and architectural design themes while

74
00:05:07,050 --> 00:05:09,690
frameworks focus on detail design and implementation.

75
00:05:09,690 --> 00:05:15,360
So this definition is kind of distinguishing between frameworks versus specific design patterns design

76
00:05:15,360 --> 00:05:18,560
planners tend to solve smaller subsets of problems.

77
00:05:18,570 --> 00:05:27,800
Framework is much larger and much more detail oriented pattern addresses of reoccurring design problem

78
00:05:28,070 --> 00:05:32,760
that arises in specific design situations and presents a solution to it.

79
00:05:33,080 --> 00:05:39,410
Patterns identify and specify abstractions that are above the level of single classes and instances

80
00:05:39,530 --> 00:05:47,280
or of components so these are just good definitions that again can give you a good summary or good information

81
00:05:47,320 --> 00:05:51,050
on what the goal of Design Patterns are what do they do.

82
00:05:51,060 --> 00:05:55,170
And again it really just comes down to I know I've said this a couple times what really comes down to

83
00:05:55,470 --> 00:05:59,870
common software solutions to common software problems.

84
00:06:00,060 --> 00:06:05,190
So they represent the best practices used by experienced and experienced object oriented programming.

85
00:06:05,220 --> 00:06:09,660
You don't want to reinvent the wheel like I said there's no reason for you to rewrite a solution to

86
00:06:09,660 --> 00:06:11,320
a common problem.

87
00:06:11,370 --> 00:06:14,420
It's been done it's been tried and tested right.

88
00:06:14,660 --> 00:06:20,310
These solutions to general problems have been faced throughout the history of programming.

89
00:06:20,420 --> 00:06:23,910
People come up with great solutions reuse those great solutions.

90
00:06:24,130 --> 00:06:24,370
Right.

91
00:06:24,380 --> 00:06:29,210
So through trial and error through numerous software experienced developers these are tried and tested

92
00:06:29,420 --> 00:06:32,020
software solutions that you should use.

93
00:06:32,030 --> 00:06:36,650
So that's what you're going to study in this class these great solutions that past experience developers

94
00:06:36,650 --> 00:06:37,790
have come up with.

95
00:06:37,790 --> 00:06:40,550
It's going to save your mom a tremendous amount of time as well.

96
00:06:41,780 --> 00:06:45,920
So it's design patterns are not just about the design of objects.

97
00:06:45,950 --> 00:06:47,720
Design is a broad field.

98
00:06:47,720 --> 00:06:51,750
Usually you'll design your software before you actually go and implement and write the code.

99
00:06:52,100 --> 00:06:54,700
If you don't do that you're going to run to a lot of issues.

100
00:06:55,040 --> 00:06:59,150
But what you can think about when think when you you know when you come this concept of design patterns

101
00:06:59,540 --> 00:07:01,430
also think about the interaction between objects.

102
00:07:01,430 --> 00:07:02,510
How do objects communicate.

103
00:07:02,510 --> 00:07:04,310
How do they work together.

104
00:07:04,340 --> 00:07:10,670
So in addition to design high level and low level detail design in some instances there's also strategies

105
00:07:11,090 --> 00:07:13,070
for object inheritance in containment.

106
00:07:13,070 --> 00:07:18,410
You're going to see a law of the same themes repeated over and over while we discuss design patterns

107
00:07:18,440 --> 00:07:20,320
terms like abstraction.

108
00:07:20,320 --> 00:07:20,830
Right.

109
00:07:20,900 --> 00:07:27,320
Inheritance encapsulation you can hear things like coupling cohesion you're going to hear a lot of design

110
00:07:27,320 --> 00:07:35,630
terminology that help you understand these good software solutions design patterns can exist at many

111
00:07:35,630 --> 00:07:40,670
levels from very low level specific solutions to more generalized system issues.

112
00:07:40,670 --> 00:07:45,140
So we'll see all sorts of different solutions that are more broad more general and some more detailed

113
00:07:46,710 --> 00:07:47,670
as far as the history.

114
00:07:47,670 --> 00:07:52,980
Again just to give you some context if you're not if you're not interested in learning about the history

115
00:07:52,980 --> 00:07:58,530
you can skip this but I like to when I when I approach a subject I like to understand all of it the

116
00:07:58,530 --> 00:08:04,560
concept design patterns originated from Christopher Wolfgang Alexander he was from Australia and he

117
00:08:04,560 --> 00:08:05,290
was an architect.

118
00:08:05,310 --> 00:08:06,950
He had nothing to do with software.

119
00:08:07,050 --> 00:08:09,390
He architected buildings.

120
00:08:09,390 --> 00:08:12,890
He learned how to build town different buildings and towns.

121
00:08:12,900 --> 00:08:16,370
He had no computer programming experience running software.

122
00:08:16,770 --> 00:08:20,780
And he came up with this concept after he noticed.

123
00:08:20,780 --> 00:08:25,860
Again a lot of repetition when designing building says an architect.

124
00:08:26,130 --> 00:08:30,900
He said each pattern describes a problem which occurs over and over again in our environment and then

125
00:08:30,900 --> 00:08:35,610
describes the core of the solution to that problem in such a way that you can use the solution a million

126
00:08:35,610 --> 00:08:38,610
times over without ever doing it the same way twice.

127
00:08:38,610 --> 00:08:43,230
That was his definition and he was really the first guy that came up with even the concept of repetition

128
00:08:44,460 --> 00:08:45,890
in nineteen ninety four ninety five.

129
00:08:45,900 --> 00:08:52,590
There was a gang of four gang of four these four architects developers where everyone to calm that took

130
00:08:52,590 --> 00:08:57,060
Alexander's concept and applied it to software software development.

131
00:08:57,060 --> 00:09:01,860
Their names are Eric gamma Richard Howe Ralph Johnson and John plus seats.

132
00:09:02,250 --> 00:09:04,320
Excuse my mispronunciation.

133
00:09:04,380 --> 00:09:08,460
These are the four main guys that came up with the twenty three basic patterns that we're going to discuss

134
00:09:08,460 --> 00:09:09,590
in this course.

135
00:09:09,780 --> 00:09:14,850
And I mentioned I always get it kind of always kind of jump back and forth between 22 and 23 three but

136
00:09:14,850 --> 00:09:19,180
we're going to focus on twenty three sometimes I'll make a mistake and say twenty two but there's twenty

137
00:09:19,180 --> 00:09:23,760
three patterns that we're going to focus upon focus on in this class they were developed and created

138
00:09:23,760 --> 00:09:31,240
by these four four programmers they expressed solutions in terms of objects and interfaces instead of

139
00:09:31,240 --> 00:09:31,870
walls and doors.

140
00:09:31,870 --> 00:09:32,040
All right.

141
00:09:32,050 --> 00:09:37,570
So they took this concept from Alexander and said hey this this the software solutions let's apply this

142
00:09:37,570 --> 00:09:43,450
to objects interfaces inheritance whatever whatever the case may be they saw the advantages of this

143
00:09:43,630 --> 00:09:48,640
of how you have these common solutions cough common software problems.

144
00:09:48,640 --> 00:09:53,580
So what happened was they basically created a book Design Patterns elements of reasonable object or

145
00:09:53,600 --> 00:09:56,080
software that was published nineteen ninety five.

146
00:09:56,080 --> 00:09:58,270
I'll be using this book quite a bit in the class.

147
00:09:58,270 --> 00:10:04,180
A lot of references to it because it's the book that created design patterns and documented all the

148
00:10:04,180 --> 00:10:05,120
useful ones.

149
00:10:05,140 --> 00:10:08,680
So we're going to utilize this book a lot for our learning.

150
00:10:08,890 --> 00:10:14,140
What this book did was it basically applied the idea of patterns to software design and they came up

151
00:10:14,140 --> 00:10:19,510
with the name design patterns because it is just repetition it's just a pattern they describe a structure

152
00:10:19,960 --> 00:10:24,760
within which to catalogue and describe these patterns know they organized when they said hey let's figure

153
00:10:24,760 --> 00:10:26,390
out what these common problems are.

154
00:10:26,500 --> 00:10:32,560
Let's give him a name let's give him certain advantages let's give some implementation details and so

155
00:10:32,560 --> 00:10:33,700
forth.

156
00:10:34,030 --> 00:10:38,010
They catalog these 23 such patterns that we're going to study in this class.

157
00:10:38,260 --> 00:10:45,050
They postulated object oriented strategies and approaches based on the design patterns and that's really

158
00:10:45,050 --> 00:10:45,230
it.

159
00:10:45,230 --> 00:10:52,580
I mean they just came up with some good solutions using good design approaches they did not create the

160
00:10:52,580 --> 00:10:53,870
patterns described in the book.

161
00:10:53,890 --> 00:10:57,500
So I may may have used that term previously but they didn't actually create it right because we know

162
00:10:57,500 --> 00:11:00,040
that these patterns existed in the past.

163
00:11:00,170 --> 00:11:02,030
They just documented right.

164
00:11:02,090 --> 00:11:05,600
They identified the problems that are exist that were common problems.

165
00:11:05,600 --> 00:11:10,460
They said hey you know my colleague always encounters this problem for two incompatible types can't

166
00:11:10,460 --> 00:11:15,980
communicate let's call that the adapter my other I've noticed over 20 years of programming that I always

167
00:11:15,980 --> 00:11:19,130
have a problem where I only want to create one instance of my object.

168
00:11:19,130 --> 00:11:22,160
Let's let's document that and call that Singleton.

169
00:11:22,160 --> 00:11:27,330
So these patterns reflected what had been learned about high quality designs for specific problems.

170
00:11:27,380 --> 00:11:29,240
And again these are high quality.

171
00:11:29,240 --> 00:11:34,790
These are for really smart people that said based on my experience and based on the history in all these

172
00:11:35,240 --> 00:11:36,200
different information.

173
00:11:36,200 --> 00:11:40,130
This is the patterns that we want to focus on these are the most popular ones.

174
00:11:40,700 --> 00:11:46,970
And they basically identified four essential elements to all patterns should have all design patterns

175
00:11:47,000 --> 00:11:50,060
should have a pattern name right.

176
00:11:50,100 --> 00:11:50,870
If you don't have a name.

177
00:11:50,880 --> 00:11:54,410
How you gonna refer to how you can even tell your colleague Hey use this.

178
00:11:54,440 --> 00:11:57,930
So they came up with this idea that patterns have to have names.

179
00:11:57,930 --> 00:12:00,960
They described the problem the solution and the consequences.

180
00:12:00,960 --> 00:12:02,100
In a word or two.

181
00:12:02,100 --> 00:12:05,430
So I provided some examples in our first lecture.

182
00:12:05,430 --> 00:12:12,780
Examples of design pattern names adaptor facade interpreter iterator they all are one or two words that

183
00:12:12,780 --> 00:12:21,100
really concisely kind of describe what the pattern is going to kind of focus on.

184
00:12:21,310 --> 00:12:23,060
This basically this by providing the same.

185
00:12:23,070 --> 00:12:26,920
It lets a designer design at a higher level of abstraction.

186
00:12:26,940 --> 00:12:30,700
You can talk to your friends and you can say hey try using the adapter for her.

187
00:12:30,730 --> 00:12:32,090
Makes it much easier to communicate.

188
00:12:33,510 --> 00:12:38,720
And it makes it easier to think about the design by just the description of that one or two words.

189
00:12:38,910 --> 00:12:42,060
They also said that every design pattern has to solve a problem right.

190
00:12:42,120 --> 00:12:43,140
I mean that's a purpose.

191
00:12:43,140 --> 00:12:47,380
So they have to explicitly document the problem.

192
00:12:47,430 --> 00:12:53,100
Explain and give some context this might describe specific design problems such as how to represent

193
00:12:53,100 --> 00:12:55,180
algorithms as objects.

194
00:12:55,260 --> 00:12:56,870
And again it's an object oriented focus.

195
00:12:56,880 --> 00:12:59,650
So everything's going to be organized around objects.

196
00:12:59,970 --> 00:13:05,500
It might describe a class or different object structures that are symptomatic of an inflexible design.

197
00:13:05,640 --> 00:13:12,070
So it also may when they describe the problem they may tell you why you don't want to do it this way.

198
00:13:12,330 --> 00:13:14,570
It's very valuable to learn things.

199
00:13:14,640 --> 00:13:19,080
Sometimes when you learn the wrong way first and then tell you how to solve it using the right way because

200
00:13:19,080 --> 00:13:22,470
then you can identify why the right way is so good.

201
00:13:22,560 --> 00:13:27,660
So the problem description also will include usually a list of conditions that must be met before it

202
00:13:27,690 --> 00:13:29,200
makes sense to apply the pattern.

203
00:13:29,250 --> 00:13:30,540
They give you a little information Hey.

204
00:13:30,570 --> 00:13:36,510
This is when you should use the pattern again if you don't have a name you don't have the problem description

205
00:13:36,810 --> 00:13:39,630
and you don't actually understand when to use it.

206
00:13:39,690 --> 00:13:45,570
It's not that useful so they try to provide this basic information pattern name and problem they followed

207
00:13:45,570 --> 00:13:49,490
that up with the solution which is obviously very important.

208
00:13:49,530 --> 00:13:53,760
The solution is going to describe the elements that make up the design the relationships responsibility

209
00:13:53,760 --> 00:13:59,490
and collaboration usually including a class diagram through UML because that succinctly helps describe

210
00:13:59,490 --> 00:14:01,200
the solution.

211
00:14:01,350 --> 00:14:04,020
We'll tell you this is an interface.

212
00:14:04,020 --> 00:14:05,930
These are these are subclasses.

213
00:14:05,940 --> 00:14:08,440
This is how all the objects relate together.

214
00:14:08,550 --> 00:14:10,770
They do not and this is very important.

215
00:14:10,770 --> 00:14:15,430
They do not describe a specific implementation right.

216
00:14:15,470 --> 00:14:18,050
Because this would make it much more restrictive.

217
00:14:18,050 --> 00:14:18,780
Right.

218
00:14:18,800 --> 00:14:23,690
You've got to think of a pattern in terms of a template which can be more generic and applied to many

219
00:14:23,690 --> 00:14:25,130
different situations.

220
00:14:25,130 --> 00:14:30,080
If it was very implementation specific it could only be applied maybe to one language patterns are not

221
00:14:30,080 --> 00:14:35,420
designed to work with just Java or just C++ though they're designed to work with any object oriented

222
00:14:35,420 --> 00:14:35,860
languages.

223
00:14:36,170 --> 00:14:41,660
So the implementations that are described in the book and that are essential for for the design patterns

224
00:14:41,990 --> 00:14:45,600
documentation don't provide detailed implementations.

225
00:14:45,680 --> 00:14:49,270
I will provide detailed them computations in this class using Java.

226
00:14:49,610 --> 00:14:54,440
But traditionally when you hear adaptor and when the Gang of Four create a document of these patterns

227
00:14:54,920 --> 00:14:57,910
they didn't provide a detailed implementation.

228
00:14:57,920 --> 00:14:59,170
They just provided that template.

229
00:14:59,560 --> 00:15:00,300
OK.

230
00:15:00,620 --> 00:15:04,730
You should also understand that the consequences of design patterns this usually includes tradeoffs

231
00:15:04,940 --> 00:15:09,820
advantages when of applying the pattern because sometimes it's not always clear cut.

232
00:15:09,830 --> 00:15:10,280
Right.

233
00:15:10,280 --> 00:15:14,420
Sometimes you may apply the pattern and you say Hey well don't forget this could cause another issue.

234
00:15:14,570 --> 00:15:16,370
There's not always perfect implementations.

235
00:15:16,400 --> 00:15:17,870
It's the best implementation.

236
00:15:17,870 --> 00:15:19,160
It's not always perfect.

237
00:15:19,220 --> 00:15:24,620
So the consequences are porn for evaluating design alternatives and for understanding the cost and the

238
00:15:24,620 --> 00:15:27,170
benefits of applying pattern.

239
00:15:27,170 --> 00:15:32,430
This often concerns space memory issues time trade offs things with performance.

240
00:15:32,540 --> 00:15:35,860
It may actually address different language in implementation issues as well.

241
00:15:35,870 --> 00:15:41,750
For example a design pattern may work well in an object oriented language that supports garbage collection

242
00:15:42,080 --> 00:15:47,000
which one that doesn't or may work well in a language that supports multiple inheritance versus one

243
00:15:47,000 --> 00:15:47,450
that doesn't.

244
00:15:47,450 --> 00:15:52,830
This kind of information will be included in the consequences section so it includes impacts on the

245
00:15:52,830 --> 00:15:59,190
systems flexibility extend ability or portability regarding software reuse.

246
00:15:59,690 --> 00:16:03,510
And these are important concepts as well flexibility extensible and portability.

247
00:16:03,530 --> 00:16:07,320
We'll talk about that when we talk about the advantages of design patterns.

248
00:16:07,400 --> 00:16:08,120
That about does it.

249
00:16:08,120 --> 00:16:13,820
I wanted to give you just a basic overview of what design patterns can do you know what they are definition

250
00:16:13,920 --> 00:16:20,480
a little history and common elements that you'll see associated with design patterns.

251
00:16:20,480 --> 00:16:20,840
Thank you.
