1
00:00:05,250 --> 00:00:06,820
Hello and welcome back.

2
00:00:06,830 --> 00:00:14,140
This lecture I'd like to talk about the different types of design patterns so we mentioned before that

3
00:00:14,170 --> 00:00:20,450
design patterns will vary in their granularity level of abstraction and how they relate to one another.

4
00:00:20,500 --> 00:00:25,570
So there's different types of design patterns based on these characteristics.

5
00:00:25,720 --> 00:00:28,630
Some patterns are often used together.

6
00:00:28,630 --> 00:00:36,910
For example the composite pattern is often used with the iterator or the visitor Some patterns are alternatives.

7
00:00:37,100 --> 00:00:40,180
They may do the same thing that they're just slightly differ.

8
00:00:40,190 --> 00:00:44,810
So for example the prototype is often an alternative to the Abstract Factory pattern.

9
00:00:44,900 --> 00:00:51,500
Again just on some examples some patterns result in similar designs even though the patterns have different

10
00:00:51,500 --> 00:00:52,800
intents.

11
00:00:52,850 --> 00:00:57,470
So some of the structure diagrams of the composite the decorator look very similar.

12
00:00:57,470 --> 00:01:02,900
As we go through these different patterns I will provide you with different diagrams outlining the design.

13
00:01:03,050 --> 00:01:10,410
And you'll notice these similarities so there are many design patterns and we need to organize them

14
00:01:10,620 --> 00:01:13,930
based on all these differences and similarities.

15
00:01:13,940 --> 00:01:14,170
All right.

16
00:01:14,250 --> 00:01:19,770
If they're used together if there are alternatives if they have different intents but similar designs

17
00:01:19,800 --> 00:01:21,450
we want to have a way to organize them.

18
00:01:22,560 --> 00:01:27,220
So the design patterns are classified into families of related patterns.

19
00:01:27,300 --> 00:01:34,560
And again this allows you to learn the patterns much quicker because you can focus your efforts on specific

20
00:01:34,560 --> 00:01:41,490
patterns grouped together so the 23 design patterns that we're going to study in this class all have

21
00:01:41,490 --> 00:01:48,510
these different levels of granularity and they all have specific applications that they can be adhered

22
00:01:48,510 --> 00:01:49,570
to.

23
00:01:49,710 --> 00:01:54,450
So they're divided into three different types the gangs of four came up with this classification they're

24
00:01:54,450 --> 00:01:56,010
organized by purpose.

25
00:01:56,010 --> 00:02:00,270
Basically what the pattern does is going to be how they're organized into these three different types

26
00:02:00,850 --> 00:02:03,150
three types that are Oregon.

27
00:02:03,150 --> 00:02:10,030
They're organized into our creation all structural structural and behavior creation all patterns concerned

28
00:02:10,050 --> 00:02:14,010
the process of object creation so creating instances of objects in Java.

29
00:02:14,010 --> 00:02:20,860
We do that using the new operator the structural patterns deal with the composition of classes or objects.

30
00:02:20,870 --> 00:02:25,380
All right how classes are related to one another by using composition.

31
00:02:25,410 --> 00:02:33,480
A lot of us has had use that has a characteristic behavior patterns are all organized in how objects

32
00:02:33,480 --> 00:02:35,830
communicate how they interact.

33
00:02:35,970 --> 00:02:40,480
So message passes in passing or how objects can work together.

34
00:02:41,010 --> 00:02:47,730
Design Patterns are also organized by scope and what this means is whether the pattern applies primarily

35
00:02:47,970 --> 00:02:50,630
to classes or to objects.

36
00:02:50,670 --> 00:02:59,480
So this is sort of a subcategory based on those three categories creation all patterns will be sub to

37
00:02:59,490 --> 00:03:01,500
class patterns or object patterns.

38
00:03:01,590 --> 00:03:06,880
The same applies to structural and behavioral class patterns deal with relationships between classes

39
00:03:06,880 --> 00:03:09,580
and their subclasses pretty straightforward.

40
00:03:09,590 --> 00:03:14,600
These relate these relations is usually a stretch establish through inheritance or using an interface

41
00:03:14,600 --> 00:03:21,110
through the inheritance child relationship objects patterns deal with objects relationships.

42
00:03:21,320 --> 00:03:25,170
And this means they can be changed at runtime making them much more dynamic.

43
00:03:25,190 --> 00:03:25,370
Right.

44
00:03:25,380 --> 00:03:28,230
We you some kind of polymorphism or something like that.

45
00:03:28,640 --> 00:03:34,770
They describe how objects can be composed into larger structures using object composition.

46
00:03:34,770 --> 00:03:35,290
Right.

47
00:03:35,300 --> 00:03:39,590
Taking a number of different objects making them and then creating another object that contains all

48
00:03:39,590 --> 00:03:40,820
those objects.

49
00:03:41,010 --> 00:03:41,320
Right.

50
00:03:41,330 --> 00:03:46,250
So it's very very useful so we'll talk about these three different categories and then also talk about

51
00:03:46,250 --> 00:03:53,030
how the class and object patterns also differ under those categories First we'll start with creation

52
00:03:53,100 --> 00:03:59,370
patterns in basically the creation of pattern to have to deal with creating instances of objects.

53
00:03:59,580 --> 00:04:04,620
And the reason for that is when you write a program the program should not depend on how the objects

54
00:04:04,620 --> 00:04:06,050
are created or arranged.

55
00:04:06,050 --> 00:04:11,670
You don't should have any dependencies in this in this regard regional design patterns provide a way

56
00:04:11,670 --> 00:04:14,610
to create objects in Java.

57
00:04:14,610 --> 00:04:18,140
As I mentioned the simplest way to create an instance of an object by using the new operator.

58
00:04:18,150 --> 00:04:21,030
We all know this because we're we're pretty proficient in Java.

59
00:04:21,030 --> 00:04:25,920
So for example if you were to create an instance of an object named Fred you create an object named

60
00:04:25,920 --> 00:04:27,170
Fred equals new Fred.

61
00:04:27,180 --> 00:04:27,930
Pretty straightforward.

62
00:04:27,930 --> 00:04:31,830
That's an instance of the Fred class creation design patterns.

63
00:04:31,830 --> 00:04:36,600
The abstract the instantiation process and again this is another common theme you're going to see in

64
00:04:36,600 --> 00:04:37,950
many of the design patterns.

65
00:04:37,950 --> 00:04:45,240
This concept of abstraction in what is the concept of abstraction it is hiding details.

66
00:04:45,330 --> 00:04:48,660
You do not want to be bogged down with the details.

67
00:04:48,690 --> 00:04:52,020
As a programmer you don't need to waste your time dealing with that.

68
00:04:52,020 --> 00:04:58,550
So a lot of the details are hidden and in the case of creation patterns the creation of logic is hidden.

69
00:04:58,920 --> 00:05:05,760
So all the knowledge is encapsulated about how the Concord classes are created and what concrete classes

70
00:05:06,030 --> 00:05:08,430
an entire application will use.

71
00:05:08,430 --> 00:05:13,890
So simply the programmer is probably gonna call a method or use another object rather than instantiating

72
00:05:13,890 --> 00:05:16,170
those objects directly using the new operator.

73
00:05:16,170 --> 00:05:20,910
So when you use these design patterns that are concerning creation patterns you're not going to be using

74
00:05:20,910 --> 00:05:21,630
new.

75
00:05:21,630 --> 00:05:25,590
You're going to be calling a method or you're going to use another object.

76
00:05:25,590 --> 00:05:31,720
All the system at large knows about the objects is their interfaces as defined by abstract classes.

77
00:05:31,740 --> 00:05:36,310
Again another common theme you're going to see throughout the course are these design pattern is going

78
00:05:36,310 --> 00:05:41,620
to be implemented using interfaces and after our classes and a lot of times it's interchangeable.

79
00:05:41,610 --> 00:05:48,150
There's not much difference to the interface in abstract class in Java an abstract class both an interface

80
00:05:48,150 --> 00:05:50,430
and after class cannot be instantiated.

81
00:05:50,510 --> 00:05:56,190
The only real differences in abstract class will have maybe some default behavior but even now with

82
00:05:56,190 --> 00:05:59,160
Java eleven interface is going to have to fault behavior as well.

83
00:05:59,160 --> 00:06:05,970
After our classes may have properties interfaces don't usually have properties so this gives the programmer

84
00:06:05,970 --> 00:06:11,780
a lot of flexibility in what gets created who creates it how it gets created and winning gets created.

85
00:06:12,780 --> 00:06:13,000
Right.

86
00:06:13,050 --> 00:06:17,590
So this is important that this flexibility is provided by the programmer.

87
00:06:17,640 --> 00:06:19,100
And again another common theme.

88
00:06:19,110 --> 00:06:25,920
Flexibility so craziness patterns will let you can figure a system with product objects that vary widely

89
00:06:25,920 --> 00:06:27,690
in structure and functionality.

90
00:06:27,840 --> 00:06:34,110
The conflict collaboration can be static which is at compile time or dynamic which is at runtime sometimes

91
00:06:34,110 --> 00:06:36,450
criminal patterns are competitors.

92
00:06:36,480 --> 00:06:41,940
So for example there are cases with either a prototype or an abstract factory that can be used interchangeably

93
00:06:42,270 --> 00:06:48,800
and they both will help the programmer sometimes creating all patterns are complementary.

94
00:06:48,810 --> 00:06:53,520
What this means is you can use them together so the builder criminal pattern.

95
00:06:53,550 --> 00:06:59,040
When we discuss that it can often be used with other patterns to implement which components get built.

96
00:06:59,070 --> 00:07:02,490
The prototype can use a singleton design pattern in its implementation

97
00:07:05,110 --> 00:07:09,600
creation or class patterns defer some part object creation of subclasses.

98
00:07:09,710 --> 00:07:16,370
So remember I mentioned on a previous slide that each category reclassification of design pattern whether

99
00:07:16,370 --> 00:07:21,500
it be creation all behavior or structural still has subcategories.

100
00:07:21,500 --> 00:07:24,230
This class patterns versus object patterns.

101
00:07:24,230 --> 00:07:30,440
And again the class patterns have to deal with classes and subclasses and so for creation all patterns

102
00:07:30,710 --> 00:07:37,620
the class patterns will just defer the actual instantiation to the subclasses or if their interfaces

103
00:07:37,620 --> 00:07:43,800
to any of the interface classes and implement the interface creation will object patterns D for the

104
00:07:44,020 --> 00:07:50,080
stance taken to another object so they're going to the responsibility of another object instantiate.

105
00:07:50,340 --> 00:07:53,250
There are five criminal patterns that we're going to study and focus on.

106
00:07:53,250 --> 00:07:59,520
I gave you a brief glimpse of this in our course overview when we go through each pattern will identify

107
00:07:59,520 --> 00:08:03,690
similarities and differences between these different criminal patterns.

108
00:08:04,010 --> 00:08:11,850
The 5 creation patterns that we will study will be the factory the abstract factory the builder the

109
00:08:11,850 --> 00:08:18,240
prototype and the singleton and we'll cover those and a lot more detail.

110
00:08:18,480 --> 00:08:24,150
The second classification I want to talk about the structural patterns these patterns describe how classes

111
00:08:24,150 --> 00:08:30,370
and objects can be combined to form larger structures where we use them together usually inheritance

112
00:08:30,370 --> 00:08:33,230
is used with interfaces or implementations.

113
00:08:33,250 --> 00:08:34,960
Again that's a common theme.

114
00:08:35,100 --> 00:08:38,290
A structural object patterns describe ways to assemble objects.

115
00:08:38,980 --> 00:08:44,770
So for example complex user interfaces and accounting data user interface may have many many different

116
00:08:44,770 --> 00:08:47,720
objects such as buttons menus sub menus.

117
00:08:47,770 --> 00:08:54,490
How can you use all of them together to create a user interface these design patterns concern class

118
00:08:54,490 --> 00:08:55,560
and object composition.

119
00:08:55,570 --> 00:08:57,430
Again composition.

120
00:08:57,430 --> 00:09:02,190
You often see this will go through the details of composition book composition is all about a has a

121
00:09:02,200 --> 00:09:05,090
relationship composition.

122
00:09:05,080 --> 00:09:09,850
There's actually a composite pattern that's very similar to this composition is where one AMG contains

123
00:09:09,850 --> 00:09:13,460
another object and it's usually described with two terms.

124
00:09:13,540 --> 00:09:19,390
Aggregation in composition together interchangeably and it's really just whether or not the lifetime

125
00:09:19,390 --> 00:09:21,670
of the object is this We'll talk about that again in more detail.

126
00:09:22,640 --> 00:09:27,890
Specifically the composite design pattern describes how to build the class hierarchy made up of classes

127
00:09:27,890 --> 00:09:29,760
for two kinds of objects.

128
00:09:29,960 --> 00:09:37,700
And this describes really composition the proxy design pattern acts as a convenient surrogate or place

129
00:09:37,700 --> 00:09:39,280
holder for another object.

130
00:09:39,440 --> 00:09:45,140
Often using and networking just like if you think of a proxy with a web address it provides this level

131
00:09:45,140 --> 00:09:49,160
of indirection to specific properties of objects.

132
00:09:49,160 --> 00:09:53,610
There are 7 structural patterns that we will study we'll go through that again.

133
00:09:53,650 --> 00:10:00,980
We're gonna be highlighting similarities and differences and have a ton of examples some examples of

134
00:10:00,980 --> 00:10:08,240
those seven structural patterns are things like the adapter the composite.

135
00:10:08,240 --> 00:10:12,790
As I mentioned the bridge or the facade.

136
00:10:12,870 --> 00:10:18,450
The third classification of patterns that we'll discuss are the behavior patterns.

137
00:10:18,450 --> 00:10:23,820
These are really the ones that you might me use most often because they talk about object communication

138
00:10:25,110 --> 00:10:30,600
how objects relate to one another another and how they can basically talk to one another character.

139
00:10:30,630 --> 00:10:35,820
They characterize complex control flow that is difficult to follow runtime control flow loop statements

140
00:10:36,600 --> 00:10:42,930
iteration conditional statements they shift the focus away from flow of control to let you concentrate

141
00:10:42,990 --> 00:10:45,610
just on the way the objects are interconnected.

142
00:10:45,630 --> 00:10:50,730
Again a common theme of abstraction flexibility you'd want to worry about a lot of these details these

143
00:10:50,730 --> 00:10:52,790
patterns will do them for you.

144
00:10:53,040 --> 00:10:58,290
So these patterns increase flexibility in carrying out this communication they provide solutions on

145
00:10:58,290 --> 00:11:03,300
how to segregate objects to be both dependent and independent.

146
00:11:03,300 --> 00:11:08,040
They're concerned with algorithms and the assignment of responsibilities between optics.

147
00:11:08,040 --> 00:11:12,870
Again this will all be clear when we go through more examples and more details of each one of our patterns

148
00:11:13,990 --> 00:11:16,640
the behavior patterns use inheritance.

149
00:11:16,780 --> 00:11:22,690
Again commonality here to describe these algorithms flow control inheritance does include interfaces

150
00:11:23,290 --> 00:11:28,330
for example the template method is a design pattern that's behavior and it's an abstract definition

151
00:11:28,330 --> 00:11:34,870
of an algorithm it defines an algorithm step by step and lets you interchange some of those steps a

152
00:11:34,870 --> 00:11:40,030
subclass will flush out the actual algorithm by defining abstract operations so you have an abstract

153
00:11:40,030 --> 00:11:46,000
class and then each one of those abstract implementations it needs need to be separated out will be

154
00:11:46,000 --> 00:11:52,180
in their own subclasses behavior object patterns describe how a group of objects cooperate to perform

155
00:11:52,180 --> 00:11:55,960
a task that no single object can carry out alone.

156
00:11:56,130 --> 00:12:01,830
So again object composition is used rather than inheritance both and both times when you use these object

157
00:12:01,830 --> 00:12:02,550
patterns.

158
00:12:02,670 --> 00:12:06,900
Right so remember the difference here we're identifying differences between class and object patterns

159
00:12:07,320 --> 00:12:13,530
class patterns we know use inheritance object patterns use composition but specifically related to behavior

160
00:12:13,530 --> 00:12:14,480
patterns.

161
00:12:14,910 --> 00:12:21,810
What will happen in the object patterns is how the group evolves cooperate form a single task again

162
00:12:21,850 --> 00:12:26,620
composition is preferred over inheritance with the object patterns the mediator patterns example of

163
00:12:26,620 --> 00:12:32,040
an object pattern under the behavior classification uses a mediator objects for pure object communication

164
00:12:33,430 --> 00:12:37,940
mediator basically has this level of indirection that allows for loose coupling.

165
00:12:38,110 --> 00:12:42,160
Another important term again I'm trying to identify highlight some of these terms that you hear throughout

166
00:12:42,160 --> 00:12:48,130
the course coupling coupling all about dependencies tightly coupled systems harder to maintain.

167
00:12:48,130 --> 00:12:55,040
Because if you change one class or another class gets affected we want to avoid tightly coupled systems

168
00:12:55,040 --> 00:12:56,140
of tightly coupled objects.

169
00:12:56,140 --> 00:12:59,850
We want to strive for loose coupling related to cohesion.

170
00:12:59,860 --> 00:13:00,080
Right.

171
00:13:00,100 --> 00:13:02,880
We know cohesion talks about responsibility.

172
00:13:02,980 --> 00:13:04,260
Focus of an object.

173
00:13:04,270 --> 00:13:08,140
High cohesion means that the object is very very highly focused.

174
00:13:08,170 --> 00:13:10,740
It's not all over the place like cohesion would be.

175
00:13:10,900 --> 00:13:13,940
An object has too many responsibilities it's doing too many things.

176
00:13:13,990 --> 00:13:17,510
And again this relates to maintenance fixing bugs adding new code.

177
00:13:17,620 --> 00:13:25,460
It's much harder to do that in a system that is tightly coupled and very low low cohesion there are

178
00:13:25,730 --> 00:13:32,930
11 behaviour patterns that we will study things like the chain of response the command the interpreter.

179
00:13:32,930 --> 00:13:35,500
Many more patterns in the behavior aspect.

180
00:13:35,540 --> 00:13:40,010
The last slide here I wanted to show you is just really an overview I took from the getting a fourth

181
00:13:40,010 --> 00:13:40,610
book.

182
00:13:40,610 --> 00:13:45,890
That kind of identifies these three different classifications and a quick summary of what's going on.

183
00:13:46,250 --> 00:13:48,040
This is just for reference.

184
00:13:48,050 --> 00:13:52,610
Again we're gonna go through all these details when we talk about each pattern in detail but you'll

185
00:13:52,610 --> 00:13:54,590
notice how each one is separated.

186
00:13:54,710 --> 00:13:56,780
Again creation all patterns right.

187
00:13:56,900 --> 00:14:03,920
How you create instance of objects either using objects themselves or composition after factory builder

188
00:14:03,980 --> 00:14:10,980
factory method they vary a little bit and they also have some similarities and sometimes they work together

189
00:14:11,460 --> 00:14:17,850
structural patterns like the adapter and the decorator right have to do with the structure of an object.

190
00:14:18,030 --> 00:14:25,050
Behavior patterns how they can communicate mediate or momento all are categorized based on what they

191
00:14:25,050 --> 00:14:26,420
can accomplish.

192
00:14:26,610 --> 00:14:30,870
And so this is how the course is going to be designed we're going to go through each one of these patterns

193
00:14:31,080 --> 00:14:34,560
sequentially by focusing on each category first.
