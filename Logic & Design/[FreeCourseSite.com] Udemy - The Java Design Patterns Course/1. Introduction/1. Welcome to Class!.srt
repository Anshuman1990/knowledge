1
00:00:05,130 --> 00:00:08,430
HELLO AND WELCOME TO JAVA design patterns.

2
00:00:08,430 --> 00:00:11,940
My name is Jason Fenn and I'll be your instructor.

3
00:00:11,940 --> 00:00:14,800
First off I want to thank you for signing up for the class.

4
00:00:14,820 --> 00:00:20,070
It's gonna be a ton of fun and I'm going to do my best to motivate you and help you learn all about

5
00:00:20,070 --> 00:00:22,120
design patterns using Java.

6
00:00:22,140 --> 00:00:25,570
I'm really excited let's get started.

7
00:00:25,680 --> 00:00:31,020
I wanted to start off to tell you just a little bit about my background so you can understand what my

8
00:00:31,020 --> 00:00:32,840
knowledge base is.

9
00:00:33,690 --> 00:00:38,520
My educational background is I have a Master's of Science and Computer Science from Binghamton University.

10
00:00:38,520 --> 00:00:40,350
It's a school in upstate New York.

11
00:00:40,350 --> 00:00:44,430
I graduated in around 2000.

12
00:00:44,430 --> 00:00:51,390
I've been a software developer for over 16 years and the workforce and I've been an online instructor

13
00:00:51,390 --> 00:00:52,660
for over 11 years.

14
00:00:52,780 --> 00:00:54,930
So I have a vast amount of experience.

15
00:00:54,990 --> 00:00:58,110
I've instructed over 20 different classes.

16
00:00:58,290 --> 00:01:01,900
This is everything from object oriented programming to compiler theory.

17
00:01:01,980 --> 00:01:08,010
I've taught many many different classes and I have a lot of experience in computer programming.

18
00:01:08,130 --> 00:01:11,890
I've been working with the Java programming language for over 20 years.

19
00:01:12,060 --> 00:01:18,530
Our first class in college and about nineteen ninety four was in Java and so the first language that

20
00:01:18,540 --> 00:01:23,540
I used in a lot of practice was the Java programming language.

21
00:01:23,550 --> 00:01:30,060
I think I learned basic first but Java was really that first language that I got comfortable with and

22
00:01:30,060 --> 00:01:35,370
I've been utilizing design patterns throughout my entire career because those are the best programming

23
00:01:35,370 --> 00:01:36,260
practices.

24
00:01:36,420 --> 00:01:40,380
And you write a lot of high quality code by following design patterns and why that's one of the reasons

25
00:01:40,380 --> 00:01:42,840
why this class is so important.

26
00:01:42,930 --> 00:01:48,460
I've created beginner Java and I've created design pattern courses at multiple universities.

27
00:01:48,600 --> 00:01:56,910
Currently I'm a software developer Xerox Corp. basically writes a software for multi functional printing

28
00:01:56,910 --> 00:02:02,970
devices mainly using the C programming language and also using Java for our front end graphical user

29
00:02:02,970 --> 00:02:03,750
interfaces.

30
00:02:04,470 --> 00:02:11,500
But no matter what if it's C or Java I'm always using design patterns again to write high quality code.

31
00:02:11,520 --> 00:02:15,930
I mainly concentrated my career on object oriented languages and mobile programming.

32
00:02:15,960 --> 00:02:17,070
That's where the excitement is.

33
00:02:17,070 --> 00:02:18,990
That's where a lot of what I enjoy doing.

34
00:02:18,990 --> 00:02:22,170
That's what's fun for me.

35
00:02:22,170 --> 00:02:27,430
But as always whenever I write my code I try to focus on writing high quality code.

36
00:02:27,570 --> 00:02:32,730
A lot of times there's not a important distinction placed on high quality code.

37
00:02:32,730 --> 00:02:34,970
And so I try to emphasize that in all my courses.

38
00:02:34,980 --> 00:02:38,440
It's not good enough to just produce the correct output.

39
00:02:38,520 --> 00:02:43,670
You want to make sure that your code is very easy to maintain properly cohesive and loosely coupled.

40
00:02:43,710 --> 00:02:45,600
So that's what we're going to focus on.

41
00:02:45,600 --> 00:02:49,120
Let's talk a little bit about the class and some of the topics that we're going gonna cover.

42
00:02:49,500 --> 00:02:52,590
We'll start off by giving an overview of design patterns.

43
00:02:52,590 --> 00:02:53,880
I'll give you a definition.

44
00:02:53,970 --> 00:02:55,490
I'll describe a little history.

45
00:02:55,500 --> 00:03:00,180
I like to do this because because it provides some context it will give you information on when did

46
00:03:00,180 --> 00:03:04,530
this concept start and why is it important.

47
00:03:04,530 --> 00:03:07,270
We'll talk about some of the advantages of design patterns.

48
00:03:07,290 --> 00:03:12,320
Why do you use design patterns and when you when you write code what are the benefits of it.

49
00:03:12,390 --> 00:03:13,530
Why even do this method.

50
00:03:13,530 --> 00:03:20,430
So I'll focus on all those advantages mainly to write highly reusable software to make your code easier

51
00:03:20,430 --> 00:03:21,710
to maintain.

52
00:03:22,020 --> 00:03:26,670
To make it loosely coupled highly cohesive you're going to see that here these common themes throughout

53
00:03:26,670 --> 00:03:32,220
the course will dive right in and talk about the different types of design patterns mainly talk about

54
00:03:32,850 --> 00:03:39,390
how design patterns are categorized how they're there three separate topics really creation will behavior

55
00:03:39,450 --> 00:03:45,300
structural and each one of those topics identify a subset of patterns that you can use to solve specific

56
00:03:45,300 --> 00:03:51,570
problems so criminal patterns have to do with creating instances of objects behavior patterns have to

57
00:03:51,570 --> 00:03:57,300
do with patterns in objects communicate and then structural patterns we'll talk about the structure

58
00:03:57,300 --> 00:03:58,490
of objects.

59
00:03:58,640 --> 00:04:04,460
After concluding with the overview and giving this the nice introduction we're going to dive right into

60
00:04:04,920 --> 00:04:07,260
really important design principles and strategies.

61
00:04:07,260 --> 00:04:11,520
These are related to me mainly all languages but we're going to focus on Java.

62
00:04:11,520 --> 00:04:19,920
This is an important section because it relates to the design patterns concepts so all the design parents

63
00:04:19,920 --> 00:04:24,180
that you learn and learn in this class are going to employ these principles and strategies.

64
00:04:24,180 --> 00:04:28,350
So that's why we talk about the principles of strategies first because you need to be able to relate

65
00:04:28,650 --> 00:04:32,580
the patterns that you learn to these concepts and so forth.

66
00:04:32,580 --> 00:04:33,900
We're talk about design smells.

67
00:04:33,900 --> 00:04:35,190
This is a common term.

68
00:04:35,430 --> 00:04:40,950
You learn about in programming that has to do with mainly things that you see in the code that tells

69
00:04:40,950 --> 00:04:44,620
you something is wrong with the design that's referred to as a smell.

70
00:04:44,700 --> 00:04:48,060
It's like almost something like you see some bad behavior in your design.

71
00:04:48,090 --> 00:04:52,950
So we first want to point out what are some things that you can see in your code that tells you that

72
00:04:52,950 --> 00:04:59,070
you're not utilizing good concepts because again good concepts is everything that you want to follow

73
00:04:59,070 --> 00:05:05,190
when you write design patterns and then really the other related strategies are all related all again

74
00:05:05,220 --> 00:05:06,960
characteristics of design patterns.

75
00:05:06,960 --> 00:05:08,550
So programming to an interface.

76
00:05:08,550 --> 00:05:13,980
This is an important thing and we'll go into this in detail composition over inheritance when you utilize

77
00:05:13,980 --> 00:05:17,400
a has a relationship versus is a relationship.

78
00:05:17,400 --> 00:05:23,050
We'll talk about delegation principles where to put responsibility in different objects.

79
00:05:23,100 --> 00:05:27,370
We'll dive right in the Single Responsibility Principle which is mainly about cohesion.

80
00:05:27,450 --> 00:05:31,730
This concept of objects should do small focused things.

81
00:05:31,740 --> 00:05:32,880
They shouldn't be all over the place.

82
00:05:32,880 --> 00:05:35,250
They shouldn't be doing 10 different things.

83
00:05:35,520 --> 00:05:42,090
We'll talk about the open closed principle where objects are open for extension of a closed for modification.

84
00:05:42,090 --> 00:05:45,980
And again this helps with the maintenance phase of the software lifecycle.

85
00:05:45,990 --> 00:05:52,260
It reduces your bugs it's easier to find bugs and it also makes the code much more extensible you can

86
00:05:52,320 --> 00:05:54,300
you can add new code.

87
00:05:54,300 --> 00:05:57,180
We'll talk about the list coughs substitution principle.

88
00:05:57,180 --> 00:06:02,700
We'll talk about interface segregation principle and that will wind up ending our design patterns.

89
00:06:02,700 --> 00:06:08,850
We will then conclude our design principle the strategy section by talking about dependency mainly inversion

90
00:06:09,000 --> 00:06:13,370
and injection the differences between because again all these concepts are important.

91
00:06:13,530 --> 00:06:16,990
If you learn design patterns you have to understand these principles.

92
00:06:16,980 --> 00:06:20,910
After we learn about all the principles we'll dive into a couple prerequisites for the course in terms

93
00:06:20,910 --> 00:06:22,830
of design.

94
00:06:22,950 --> 00:06:25,320
We'll talk about UML Unified modeling language.

95
00:06:25,320 --> 00:06:30,990
This is mainly a documentation tool that can describe designed to you so design patterns are all about

96
00:06:31,650 --> 00:06:38,610
following good programming practice reusable software and in order to understand how these patterns

97
00:06:38,610 --> 00:06:38,990
work.

98
00:06:39,000 --> 00:06:42,670
You have to understand how to design and so we're going to show you class diagrams.

99
00:06:42,670 --> 00:06:47,550
I'm going to show you maybe some other object type diagrams sequence diagrams you need to understand

100
00:06:47,550 --> 00:06:51,850
these diagrams and what they document in order to understand the design pattern.

101
00:06:51,900 --> 00:06:53,990
So we'll just do a quick rundown of UML.

102
00:06:54,120 --> 00:07:00,150
Talk about class diagrams and an object oriented references mainly things related to inheritance interfaces

103
00:07:00,150 --> 00:07:07,720
composition and annotation simple drawing symbols and the documentation tools.

104
00:07:08,140 --> 00:07:11,170
Then we're gonna divide the course basically into those three sections.

105
00:07:11,170 --> 00:07:17,770
We're gonna discuss all 22 patterns that the Gang of Four came up with in nineteen ninety four around.

106
00:07:17,920 --> 00:07:20,000
So we'll start off with the creation of design patterns.

107
00:07:20,110 --> 00:07:23,040
As I mentioned this has to do with creating instances of objects.

108
00:07:23,380 --> 00:07:26,950
We'll run through about five patterns factory Abstract Factory.

109
00:07:26,950 --> 00:07:32,440
Those are related and then the Singleton singletons of real popular one that we'll discuss it allows

110
00:07:32,440 --> 00:07:35,200
you to create a single instance of an object.

111
00:07:35,230 --> 00:07:39,760
This is important when you want to create programs that only have one instance so maybe a program that

112
00:07:39,760 --> 00:07:42,730
simulates a printer or different hardware.

113
00:07:42,910 --> 00:07:49,320
We'll dive into the builder and the prototype and we'll go into all the details of these patterns in

114
00:07:49,330 --> 00:07:51,040
each one of these sections.

115
00:07:51,040 --> 00:07:54,460
We'll follow that up by talking about the structural design patterns.

116
00:07:54,460 --> 00:08:01,000
And there is basically 7 structural design patterns that will discuss listed right here adaptor Napster's

117
00:08:01,000 --> 00:08:02,490
and other real popular one.

118
00:08:02,620 --> 00:08:09,800
The last two incompatible objects to be able to talk to one another bridge composite decorator which

119
00:08:09,800 --> 00:08:17,180
decorator can be an alternative sub classing the facade the fly away in the proxy will end all of our

120
00:08:17,750 --> 00:08:23,180
discussion on design patterns by talking about the behavior design patterns how objects communicate

121
00:08:23,180 --> 00:08:29,930
with one another we'll talk about chain of responsibility command interpreter Iterator iterator you

122
00:08:29,930 --> 00:08:35,240
probably have a somewhat fundamental understanding of through the Java collection classes how you can

123
00:08:35,660 --> 00:08:42,540
go through different elements in a data structure we'll talk about the mediator the momento observer's

124
00:08:42,590 --> 00:08:47,000
of real popular one it's a good way that you can communicate with many different objects follow that

125
00:08:47,000 --> 00:08:51,650
up with the state strategy template method and then we'll end the course with the visitor design pattern

126
00:08:52,780 --> 00:08:57,440
we'll have a couple more lectures after discussing design patterns they have to deal with basically

127
00:08:57,440 --> 00:09:03,380
maybe some future sub topics that you can be more specific to Java patterns maybe related to the spring

128
00:09:03,380 --> 00:09:09,200
framework we'll talk a little bit about even bigger or larger patterns related to architecture like

129
00:09:09,320 --> 00:09:14,270
MVC in the model view controller but that will be touched upon Well we really want to focus on the class

130
00:09:14,300 --> 00:09:20,030
is the twenty two design patterns related to the Gang of Four and related to the Java programming language

131
00:09:20,380 --> 00:09:26,180
why we're doing all these introduction and lectures we're going to have all sorts of different challenges

132
00:09:26,660 --> 00:09:31,910
and challenges are really just assignments I want to try to make it is fun and exciting for you to learn

133
00:09:31,910 --> 00:09:36,800
about design patterns by providing these challenges solutions I don't want to just go through demonstrations

134
00:09:36,800 --> 00:09:39,530
or provide power points I want to make this fun for you.

135
00:09:39,530 --> 00:09:43,010
So we're gonna have some assignments we'll have solutions to those assignments we're going to have a

136
00:09:43,010 --> 00:09:50,620
ton of coding examples I'll be using the IDC we'll go through specifically we'll be using intelligence

137
00:09:50,660 --> 00:09:52,630
so we'll go through many examples intelligent.

138
00:09:53,240 --> 00:09:58,760
Most of you or hopefully all of you have been proficient in intelligence it's really the main idea you

139
00:09:58,760 --> 00:10:01,770
want to use for Java development but it's gonna be a lot of fun.

140
00:10:01,790 --> 00:10:07,820
I mean all these job examples will help you become a better job programmer but also help you write nice

141
00:10:07,820 --> 00:10:09,190
high quality code.

142
00:10:09,290 --> 00:10:12,270
The course is really organized around this theory.

143
00:10:12,470 --> 00:10:16,580
We're going to talk about design patterns I want to tell you why they're important and I'm going to

144
00:10:16,580 --> 00:10:22,370
provide examples and then addition to understanding all of the why in the theory behind it I'm not going

145
00:10:22,370 --> 00:10:27,770
to provide a more practical solution by providing a ton of demonstrations in the idea itself writing

146
00:10:27,770 --> 00:10:28,420
the code.

147
00:10:28,630 --> 00:10:30,750
So I'm hoping it'll be very well rounded.

148
00:10:30,920 --> 00:10:36,320
A lot of you know a lot of instructors Sarah you dummy they focus just on the code right.

149
00:10:36,320 --> 00:10:40,340
They don't necessarily tell you a lot of the the why behind it.

150
00:10:40,340 --> 00:10:42,370
They just say hey this is how you do something.

151
00:10:42,440 --> 00:10:47,540
This is how you do it and that's great and everything but it's not always important to just know how

152
00:10:47,540 --> 00:10:48,640
you have to know what you're doing right.

153
00:10:48,650 --> 00:10:51,850
You have to understand the concepts behind it.

154
00:10:52,070 --> 00:10:55,410
The theory behind what you're doing and why it's a good way to do this.

155
00:10:55,460 --> 00:11:01,670
So we're gonna go with a two pronged approach by both discussing theory in detail and many many many

156
00:11:01,670 --> 00:11:06,830
demonstrations to get you have practical examples so that you can become proficient in actually writing

157
00:11:06,950 --> 00:11:09,390
and using design patterns.

158
00:11:09,440 --> 00:11:14,840
We'll be doing a ton of hands on coding as I mentioned tons of demonstrations using intelligence and

159
00:11:14,840 --> 00:11:16,100
writing tons of Java code.

160
00:11:16,100 --> 00:11:18,110
The outcomes of the course at the end of the course.

161
00:11:18,110 --> 00:11:21,580
This is basically what you want to have learned.

162
00:11:21,620 --> 00:11:24,800
I want you to understand the fundamentals of design patterns right.

163
00:11:24,800 --> 00:11:26,300
Why do we use the design patterns.

164
00:11:26,300 --> 00:11:28,140
What are the advantages of them.

165
00:11:28,190 --> 00:11:30,620
Why are they good programming practice.

166
00:11:30,620 --> 00:11:33,350
How does it help you become a better job programmer.

167
00:11:33,380 --> 00:11:38,440
I want you to be able to create job applications using the design patterns that are discussed in class.

168
00:11:38,450 --> 00:11:40,300
I don't want to just tell you what design patterns are.

169
00:11:40,430 --> 00:11:43,530
And then after the after the course you just kind of forget about it.

170
00:11:43,550 --> 00:11:46,560
I want you to be able to actually say all the adapter.

171
00:11:46,630 --> 00:11:47,360
I know what that is.

172
00:11:47,360 --> 00:11:52,060
I can write a job application that that uses the adapter that's going to be very important.

173
00:11:52,070 --> 00:11:56,660
I want you to be able to master the art of problem solving in problem programming using efficient proven

174
00:11:56,660 --> 00:11:57,470
methods.

175
00:11:57,530 --> 00:12:01,460
So we all know that programming is all about problem solving.

176
00:12:01,460 --> 00:12:06,910
You become a better problem solver when you understand the right approaches to solve the problems.

177
00:12:07,040 --> 00:12:12,920
If you're continually solving problems and you're using the wrong approach you're never gonna get better.

178
00:12:12,920 --> 00:12:14,650
So we want to follow these proven methods.

179
00:12:14,660 --> 00:12:20,630
We want to follow these design patterns that utilize good high quality design strategies so that when

180
00:12:20,630 --> 00:12:24,170
you write the code you're actually following these design principles right.

181
00:12:24,200 --> 00:12:26,490
You're you're making the code easier to maintain.

182
00:12:26,510 --> 00:12:30,020
Easier to debug and just easier to add new features.

183
00:12:30,020 --> 00:12:32,100
I mean that's really what it's all about.

184
00:12:32,120 --> 00:12:35,780
You don't want to just write code and just get the output to work.

185
00:12:35,880 --> 00:12:41,210
You know I always tell all my students getting the output correct is only one phase of writing the code.

186
00:12:41,300 --> 00:12:47,480
You have to focus on high quality software using good design principles mainly because the maintenance

187
00:12:47,480 --> 00:12:52,940
phase of the software lifecycle is so important and so expensive delivering the code is only one phase

188
00:12:53,420 --> 00:12:58,790
maintaining for the next 15 years for people to use it is really the most important thing.

189
00:12:58,790 --> 00:13:03,860
So we're going to focus on all these nice things and that is really just having to write high quality

190
00:13:03,860 --> 00:13:05,250
Java code.

191
00:13:05,270 --> 00:13:11,040
All right we're going to be using Java eleven latest version and we're going focus on module code that

192
00:13:11,100 --> 00:13:15,330
objects that are highly cohesive you have good encapsulation and low coupling.

193
00:13:15,330 --> 00:13:18,960
We don't want a lot of dependencies between these objects because the more dependencies the harder it

194
00:13:18,960 --> 00:13:20,250
is to debug.

195
00:13:20,250 --> 00:13:24,780
So throughout the course as we as we present these design pattern concepts we're going to focus on high

196
00:13:24,780 --> 00:13:25,360
quality.

197
00:13:25,470 --> 00:13:28,380
You're going to become proficient in basic design principles right.

198
00:13:28,440 --> 00:13:33,450
So in addition to these design patterns because the design patterns follow all these principles you're

199
00:13:33,450 --> 00:13:38,780
not going to have the added benefit of understanding the risk of substitution principle of understanding

200
00:13:38,780 --> 00:13:40,690
as single responsibility principle.

201
00:13:40,710 --> 00:13:47,020
These are all standard design strategies that all high quality programmers know.

202
00:13:47,100 --> 00:13:49,800
So you're going to have that added benefit.

203
00:13:49,800 --> 00:13:51,810
And lastly you're going to have fun right.

204
00:13:51,810 --> 00:13:53,120
I don't want this to be a boring class.

205
00:13:53,130 --> 00:13:56,220
I want you to fall asleep during lectures or demonstrations.

206
00:13:56,220 --> 00:14:00,300
I want to enjoy what you're doing because otherwise it doesn't always stick up in your brain right.

207
00:14:00,300 --> 00:14:04,290
If you do if you're not having fun if it's boring monotonous and you don't actually know what you're

208
00:14:04,290 --> 00:14:05,910
doing it's very hard to learn.

209
00:14:05,970 --> 00:14:11,550
So I want to try to make this a fun class where you learn a lot of important formation about design

210
00:14:12,060 --> 00:14:17,070
mainly design patterns but also design principles so I'm looking forward to this.

211
00:14:17,160 --> 00:14:18,600
It's gonna be a lot of fun.

212
00:14:18,690 --> 00:14:20,920
And again I thank you for signing up for the course.

213
00:14:20,940 --> 00:14:21,900
Let's get started.

214
00:14:21,900 --> 00:14:22,320
Thank you.
